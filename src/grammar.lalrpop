use crate::common::*;
use crate::ast::*;

grammar;

pub Package: Package = {
    <items: Item*> => Package {
      items,
    },
}

Item: Item = {
    <m:ModDef> => Item::ModDef(m),
}

Visibility: Visibility = {
  <v:"public"?> => {
    if v.is_none() {
      Visibility::Private
    } else {
      Visibility::Public
    }
  }
}

ModDef: ModDef = {
    <v:Visibility> "module" <name:Id> "{"
        <decls:(Decl ";")*>
    "}" => {
      let decls = decls.into_iter().map(|(decl, _semi)| decl).collect();
      ModDef {
        name,
        decls,
      }
    },
}

Decl: Decl = {
    <c:Component> => Decl::Component(c),
    <c:Connect> => Decl::Connect(c),
    <m:Submodule> => Decl::Submodule(m),
}

Component: Component = {
    "incoming" <name:Id> ":" <typ:Type> => {
        Component {
            kind: ComponentKind::Incoming,
            name,
            typ: *typ,
            connect: None,
            clock: None,
            reset: None,
        }
    },
    "outgoing" <name:Id> ":" <typ:Type> <connect:InlineConnect?> => {
        Component {
            kind: ComponentKind::Outgoing,
            name,
            typ: *typ,
            connect,
            clock: None,
            reset: None,
        }
    },
    "wire" <name:Id> ":" <typ:Type> <connect:InlineConnect?> => {
        Component {
            kind: ComponentKind::Wire,
            name,
            typ: *typ,
            connect,
            clock: None,
            reset: None,
        }
    },
    "reg" <name:Id> ":" <typ:Type> "on" <clock:Expr> <rst:("reset" Expr)?> <connect:InlineConnect?> => {
        let reset = rst.map(|s| *s.1); // .1 ignores the "reset" keyword
        Component {
            kind: ComponentKind::Reg,
            name,
            typ: *typ,
            connect,
            clock: Some(*clock),
            reset,
        }
    },
}

Connect: Connect = {
    <target:Path> ":=" <e:Expr> => Connect(target, ConnectType::Continuous, *e),
    <target:Path> "<=" <e:Expr> => Connect(target, ConnectType::Latched, *e),
}

InlineConnect: InlineConnect = {
    ":=" <e:Expr> => InlineConnect(ConnectType::Continuous, *e),
    "<=" <e:Expr> => InlineConnect(ConnectType::Latched, *e),
}

Submodule: Submodule = {
    "submodule" <name:Id> "of" <moddef:Id> => Submodule(name, moddef),
}

Type: Box<Type> = {
  "Clock" => Box::new(Type::Clock),
  "Word" "[" <w:Nat> "]" => Box::new(Type::Word(w)),
}

pub Expr: Box<Expr> = {
//    <e:ExprLet> => e,
//    <e:ExprIf> => e,
//    <e:ExprMatch> => e,
    <e:ExprCall> => e,
}

ExprCall: Box<Expr> = {
//    <ll:@L> <name:Ctor> <rr:@R> =>  Box::new(Expr::Call(name, vec![], vec![])),
//    <ll:@L> <name:Ctor> "(" <es:ExprList> ")" <rr:@R> =>  Box::new(Expr::Call(name, vec![], es)),
//    "cat" "(" <es:ExprList> ")" => {
//        Box::new(Expr::Cat(es))
//    },
//    <ll:@L> <name:Id> "(" <es:ExprList> ")" <rr:@R> => {
//        Box::new(Expr::FnCall(name, es))
//    },
    <ll:@L> <s:ExprIdx> "->" <name:Id> "(" <es:ExprList> ")" <rr:@R> => {
        Box::new(Expr::MethodCall(s, name, es))
    },
    <ll:@L> <s:ExprIdx> "->" "as" "(" <typ:Type> ")" <rr:@R> => {
        Box::new(Expr::As(s, *typ))
    },
    <e:ExprIdx> => e,
}

ExprIdx: Box<Expr> = {
/*
    <ll:@L> <e:ExprIdx> "->" <field:Id> <rr:@R> => Box::new(Expr::IdxField(e, field.clone())),
    <ll:@L> <e:ExprIdx> "[" <i:Nat> "]" <rr:@R> => Box::new(Expr::Idx(e, i)),
    <ll:@L> <e:ExprIdx> "[" <j:Nat> ".." <i:Nat> "]" <rr:@R> => Box::new(Expr::IdxRange(e, j, i)),
*/
    <e:ExprBase> => e,
}

ExprBase: Box<Expr> = {
    <e:ExprVec> => e,
//    <e:ExprStruct> => e,
//    <e:ExprWith> => e,
//    <e:ExprAs> => e,
    <e:ExprLit> => e,
    <e:ExprReference> => e,
    "(" <e:Expr> ")" => e,
}

/*
ExprStruct: Box<Expr> = {
    <ll:@L> "struct" <name:Id> "{" <fields:FieldExprList> "}" <rr:@R> => {
        let fields = fields.iter().map(|(name, e)| (name.to_string(), Box::new(e.clone()))).collect();
        Box::new(Expr::Struct(fields))
    },
}
*/

FieldExprList: Vec<(String, Expr)> = {
    <fields:((Id "=" Expr ("," Id "=" Expr)* ","?)?)> => {
        if let Some((name, _eqsign, expr, fields, _comma)) = fields {
            let mut results = vec![(name.to_string(), *expr)];
            for (_comma, name, _eqsign, expr) in fields {
                results.push((name.to_string(), *expr));
            }
            results
        } else {
            vec![]
        }
    },
}

/*
ExprWith: Box<Expr> = {
  "with" <e:Expr> "{"
    <edits:ExprWidthEdit*>
  "}" => {
    Box::new(Expr::With(e, edits))
  }
}

ExprWidthEdit: WithEdit = {
  "this" "[" <n:Nat> "]" "=" <e:Expr> ";" => WithEdit::Idx(n, e),
  "this" "->" <id:Id> "]" "=" <e:Expr> ";" => WithEdit::Field(id, e),
}
*/

ExprVec: Box<Expr> = {
    <ll:@L> "[" <es:ExprList> "]" <rr:@R> => Box::new(Expr::Vec(es)),
    <ll:@L> "[" <e:Expr> ";" <n:Nat> "]" <rr:@R> => Box::new(Expr::Vec(vec![*e; n as usize])),
}

ExprList: Vec<Expr> = {
    <exprs:((Expr ("," Expr)* ","?)?)> => {
        if let Some((expr, exprs, _comma)) = exprs {
            let mut results = vec![*expr];
            for (_comma, expr) in exprs {
                results.push(*expr);
            }
            results
        } else {
            vec![]
        }
    },
}

ExprLit: Box<Expr> = {
    <ll:@L> <lit:WordLit> <rr:@R> => {
        Box::new(Expr::Word(lit))
    },

//    "true" => Box::new(Expr::Bool(true)),
//    "false" => Box::new(Expr::Bool(false)),
}

ExprReference: Box<Expr> = {
  <path: Path> => Box::new(Expr::Reference(path))
}


Path: Path = {
    <id0:Id> <ids:("." Id)*> => {
        let mut parts = vec![id0.to_string()];
        for (_, id) in ids {
          parts.push(id.to_string());
        }
        let path: String = parts.join(".").chars().collect();
        path.into()
    },
}

WordLit: WordLit = {
    <n:Nat> => {
        WordLit {
            value: n,
            width: None,
        }
    },
    <lit:r"[0-9][_0-9]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = parts[0].parse().unwrap();
        let width = parts[1].parse().unwrap();
        WordLit {
            value: v,
            width: Some(width),
        }
    },
    <lit:r"0b[0-1][_0-1]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = u64::from_str_radix(&parts[0][2..], 2).unwrap();
        let width = parts[1].parse().unwrap();
        WordLit {
            value: v,
            width: Some(width),
        }
    },
    <lit:r"0x[0-9a-fA-F][_0-9a-fA-F]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = u64::from_str_radix(&parts[0][2..], 16).unwrap();
        let width = parts[1].parse().unwrap();
        WordLit {
            value: v,
            width: Some(width),
        }
    },
}

Nat: u64 = {
    <lit:r"[0-9][_0-9]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        lit_nounders.parse().unwrap()
    },
    <lit:r"0b[0-9][_0-9]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        u64::from_str_radix(&lit_nounders[2..], 2).unwrap()
    },
    <lit:r"0x[0-9][_0-9]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        u64::from_str_radix(&lit_nounders[2..], 16).unwrap()
    },
}

Id: Ident = {
    <ll:@L> <id:r"[_A-Za-z][_A-Za-z0-9]*"> <rr:@R> => {
        id.into()
    },
}

match {
    r"//[^\n\r]*[\r\n]" => {},
    r"[\r\n]*" => {},
    r"/\*[^*]*\*/" => {},
    r" " => {},
    _,
}
