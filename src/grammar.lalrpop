use crate::common::*;
use crate::ast::*;
use super::AstGen;

grammar<'a>(gen: &'a mut AstGen);

pub Package: Package = {
    <imports:PackageImport*> <items:Item*> => Package {
        imports,
        items,
    },
}

PackageImport: PackageImport = {
    "import" <ident:Ident> ";" => PackageImport(gen.id(), ident),
}

Item: Item = {
    <m:ModDef> => Item::ModDef(m),
    <e:StructDef> => Item::StructDef(e),
    <e:UnionDef> => Item::UnionDef(e),
    <e:PortDef> => Item::PortDef(e),
}

Visibility: Visibility = {
  <v:"pub"?> => {
    if v.is_none() {
      Visibility::Private
    } else {
      Visibility::Public
    }
  }
}

ModDef: ModDef = {
    <v:Visibility> <ext:"ext"?> "mod" <name:Ident> "{"
        <decls:(Decl ";")*>
    "}" => {
        let decls = decls.into_iter().map(|(decl, _semi)| decl).collect();
        ModDef {
            ast_id: gen.id(),
            name,
            decls,
            ext: ext.is_some(),
        }
    },
}

StructDef: StructDef = {
    "struct" "type" <name:Ident> "{"
        <fields:Field*>
    "}" => {
        StructDef {
            ast_id: gen.id(),
            name,
            fields,
        }
    },
}

Field: Field = {
    <id:Ident> ":" <typ:Type> ";" => Field(id, typ),
}


UnionDef: UnionDef = {
    <ll:@L> <vis:Visibility> "union" "type" <name:Ident> "{"
        <alts:Alt*>
    "}" <rr:@R> => {
        UnionDef {
            ast_id: gen.id(),
            name,
            alts,
        }
    },
}

Alt: Alt = {
    <ident:Ident> "(" <typs:TypeList> ")" ";" => Alt(ident, typs),
}

PortDef: PortDef = {
    <ll:@L> <vis:Visibility> "port" <name:Ident> "{"
        <channels:Channel*>
    "}" <rr:@R> => {
        PortDef {
            ast_id: gen.id(),
            name,
            channels,
        }
    },
}

Channel: Channel = {
    <dir:ChannelDir> <id:Ident> ":" <typ:Type> ";" => Channel(dir, id, typ),
}

ChannelDir: ChannelDir = {
    "mosi" => ChannelDir::Mosi,
    "miso" => ChannelDir::Miso,
}

TypeList: Vec<Arc<Type>> = {
    <args:((Type ("," Type)* ","?)?)> => {
        if let Some((typ, args, _comma)) = args {
            let mut results = vec![typ];
            for (_comma, typ) in args {
                results.push(typ);
            }
            results
        } else {
            vec![]
        }
    },
}

Decl: Decl = {
    <c:Component> => Decl::Component(c),
    <m:Submodule> => Decl::Submodule(m),
    <p:Port> => Decl::Port(p),
    <c:Wire> => Decl::Wire(c),
}

Component: Component = {
    "incoming" <name:Ident> ":" <typ:Type> => {
        Component {
            kind: ComponentKind::Incoming,
            name,
            typ: typ,
            clock: None,
        }
    },
    "outgoing" <name:Ident> ":" <typ:Type> => {
        Component {
            kind: ComponentKind::Outgoing,
            name,
            typ: typ,
            clock: None,
        }
    },
    "node" <name:Ident> ":" <typ:Type> => {
        Component {
            kind: ComponentKind::Node,
            name,
            typ: typ,
            clock: None,
        }
    },
    "reg" <name:Ident> ":" <typ:Type> "on" <clock:Expr> => {
        Component {
            kind: ComponentKind::Reg,
            name,
            typ,
            clock: Some(clock),
        }
    },
}

Submodule: Submodule = {
    "mod" <name:Ident> "of" <moddef:QualIdent> => Submodule { name, moddef },
}

Port: Port = {
    <role:PortRole> "port" <name:Ident> "of" <portdef:QualIdent> => Port { role, name, portdef },
}

PortRole: PortRole = {
    "master" => PortRole::Master,
    "slave" => PortRole::Slave,
}

Wire: Wire = {
    <target:Path> ":=" <e:Expr> => Wire(target, WireType::Continuous, e),
    <target:Path> "<=" <e:Expr> => Wire(target, WireType::Latched, e),
}

Type: Arc<Type> = {
    "Clock" => Arc::new(Type::Clock),
    "Word" "[" <w:Nat> "]" => Arc::new(Type::Word(w)),
    <path:QualIdent> => Arc::new(Type::TypeRef(path)),
}

pub Expr: Arc<Expr> = {
    <e:ExprLet> => e,
    <e:ExprMatch> => e,
    <e:ExprIf> => e,
    <e:ExprCall> => e,
}

ExprLet: Arc<Expr> = {
    <ll:@L> "let" <x:Ident> <ascription:(":" Type)?> "=" <e:Expr> "in"
    <b:Expr> <rr:@R> => {
        let type_ascription = ascription.map(|(_of, typ)| typ);
        Arc::new(Expr::Let(x, type_ascription, e, b))
    },
}

ExprMatch: Arc<Expr> = {
    <ll:@L> "match" <ascription:(":" Type)?> <e:Expr> "{"
        <arms:MatchArm*>
    "}" <rr:@R> => {
        let type_ascription = ascription.map(|(_of, typ)| typ);
        Arc::new(Expr::Match(e, type_ascription, arms))
    },
}

MatchArm: MatchArm = {
    <pat:Pat> "=>" <e:Expr> ";" => MatchArm(pat, e),
}

Pat: Pat = {
    <id:Ctor> => Pat::At(id.as_str()[1..].into(), vec![]),
    <id:Ctor> "(" <subpats:PatList> ")" => {
        Pat::At(id.as_str().into(), subpats)
    },
    <id:Ident> => Pat::Bind(id.into()),
    "else" => Pat::Otherwise,
}

PatList: Vec<Pat> = {
    <pats:((Pat ("," Pat)* ","?)?)> => {
        if let Some((pat, pats, _comma)) = pats {
            let mut results = vec![pat];
            for (_comma, pat) in pats {
                results.push(pat);
            }
            results
        } else {
            vec![]
        }
    },
}

ExprIf: Arc<Expr> = {
    <ll:@L> "if" <cond:Expr> "{"
        <e1:Expr>
    <elseifs:("}" "else" "if" Expr "{" Expr)*>
    "}" "else" "{"
        <elseexpr:Expr>
    "}" <rr:@R> => {
        let mut result = elseexpr;

        for (_, _, _, elseif_cond, _, elseif_body) in elseifs.into_iter().rev() {
            result = Arc::new(Expr::If(elseif_cond, elseif_body, result));
        }

        Arc::new(Expr::If(cond, e1, result))
    },
}

ExprCall: Arc<Expr> = {
//    <ll:@L> <name:Ctor> <rr:@R> =>  Arc::new(Expr::Call(name, vec![], vec![])),
    <ll:@L> <name:Ctor> "(" <es:ExprList> ")" <rr:@R> =>  Arc::new(Expr::Ctor(name, es)),

    "cat" "(" <es:ExprList> ")" => {
        Arc::new(Expr::Cat(es))
    },

//    <ll:@L> <name:Ident> "(" <es:ExprList> ")" <rr:@R> => {
//        Arc::new(Expr::FnCall(name, es))
//    },
    <ll:@L> <s:ExprCall> "->" <name:Ident> "(" <es:ExprList> ")" <rr:@R> => {
        Arc::new(Expr::MethodCall(s, name, es))
    },
    <ll:@L> <s:ExprCall> "->" "as" "(" <typ:Type> ")" <rr:@R> => {
        Arc::new(Expr::As(s, typ))
    },
//    <ll:@L> <e:ExprBase> "->" <field:Ident> <rr:@R> => Arc::new(Expr::IdxField(e, field.clone())),
    <e:ExprBase> "[" <i:Nat> "]" => Arc::new(Expr::Idx(e, i)),
    <ll:@L> <e:ExprBase> "[" <j:Nat> ".." <i:Nat> "]" <rr:@R> => Arc::new(Expr::IdxRange(e, j, i)),
    <e:ExprBase> => e,
}

ExprBase: Arc<Expr> = {
    <e:ExprVec> => e,
    <e:ExprStruct> => e,
    <e:ExprLit> => e,
    <e:ExprReference> => e,
    "(" <e:Expr> ")" => e,
}

FieldExprList: Vec<(Ident, Arc<Expr>)> = {
    <fields:((Ident "=" Expr ("," Ident "=" Expr)* ","?)?)> => {
        if let Some((name, _eqsign, expr, fields, _comma)) = fields {
            let mut results = vec![(name, expr)];
            for (_comma, name, _eqsign, expr) in fields {
                results.push((name, expr));
            }
            results
        } else {
            vec![]
        }
    },
}

ExprStruct: Arc<Expr> = {
    <ll:@L> "$" <id:QualIdent> "{" <fields:FieldExprList> "}" <rr:@R> => {
        Arc::new(Expr::Struct(Some(id), fields))
    },
}

ExprVec: Arc<Expr> = {
    <ll:@L> "[" <es:ExprList> "]" <rr:@R> => Arc::new(Expr::Vec(es)),
    <ll:@L> "[" <e:Expr> ";" <n:Nat> "]" <rr:@R> => Arc::new(Expr::Vec(vec![e; n as usize])),
}

ExprList: Vec<Arc<Expr>> = {
    <exprs:((Expr ("," Expr)* ","?)?)> => {
        if let Some((expr, exprs, _comma)) = exprs {
            let mut results = vec![expr];
            for (_comma, expr) in exprs {
                results.push(expr);
            }
            results
        } else {
            vec![]
        }
    },
}

ExprLit: Arc<Expr> = {
    <ll:@L> <lit:WordLit> <rr:@R> => {
        Arc::new(Expr::Word(lit))
    },

//    "true" => Arc::new(Expr::Bool(true)),
//    "false" => Arc::new(Expr::Bool(false)),
}

ExprReference: Arc<Expr> = {
  <path:Path> => Arc::new(Expr::Reference(path))
}


Path: Path = {
    <id0:Ident> <ids:("." Ident)*> => {
        let mut parts = vec![id0.to_string()];
        for (_, id) in ids {
          parts.push(id.to_string());
        }
        let path: String = parts.join(".").chars().collect();
        path.into()
    },
}

WordLit: WordLit = {
    <n:Nat> => {
        WordLit {
            value: n,
            width: None,
        }
    },
    <lit:r"[0-9][_0-9]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = parts[0].parse().unwrap();
        let width = parts[1].parse().unwrap();
        WordLit {
            value: v,
            width: Some(width),
        }
    },
    <lit:r"0b[0-1][_0-1]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = u64::from_str_radix(&parts[0][2..], 2).unwrap();
        let width = parts[1].parse().unwrap();
        WordLit {
            value: v,
            width: Some(width),
        }
    },
    <lit:r"0x[0-9a-fA-F][_0-9a-fA-F]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = u64::from_str_radix(&parts[0][2..], 16).unwrap();
        let width = parts[1].parse().unwrap();
        WordLit {
            value: v,
            width: Some(width),
        }
    },
}

Nat: u64 = {
    <lit:r"[0-9][_0-9]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        lit_nounders.parse().unwrap()
    },
    <lit:r"0b[0-1][_0-1]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        u64::from_str_radix(&lit_nounders[2..], 2).unwrap()
    },
    <lit:r"0x[0-9A-Za-z][_0-9A-Za-z]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        u64::from_str_radix(&lit_nounders[2..], 16).unwrap()
    },
}

Ctor: Ident = {
    <rr:@R> <id:r"@[_A-Za-z][_A-Za-z0-9]*"> <ll:@L> => {
        id[1..].into()
    },
}

QualIdent: QualIdent = {
    <ll:@L> <id:r"[_A-Za-z][_A-Za-z0-9]*::[_A-Za-z][_A-Za-z0-9]*"> <rr:@R> => {
        let parts: Vec<&str> = id.split("::").collect();
        assert_eq!(parts.len(), 2);
        let namespace: Option<Ident> = Some(parts[0].into());
        let name: Ident = parts[1].into();
        QualIdent::new(namespace, name)
    },
    <id:Ident> => QualIdent::new(None, id)
}

Ident: Ident = {
    <ll:@L> <id:r"[_A-Za-z][_A-Za-z0-9]*"> <rr:@R> => {
        id.into()
    },
}

match {
    r"//[^\n\r]*[\r\n]" => {},
    r"[\r\n]*" => {},
    r"/\*[^*]*\*/" => {},
    r" " => {},
} else {
    r"0x[0-9A-Za-z][_0-9A-Za-z]*"
} else {
    _,
}
