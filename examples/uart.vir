union type UartSenderState {
    Idle();
    Start(Word[11]);
    Send(Word[3], Word[11]);
    Stop(Word[11]);
}

mod UartSender {
    incoming clock      : Clock; // 12MHz
    incoming reset      : Word[1];
    incoming data       : Word[8];
    incoming data_valid : Word[1];
    outgoing ready      : Word[1];
    outgoing uart_tx    : Word[1];

    reg uart_tx_reg : Word[1] on clock;
    uart_tx <= uart_tx_reg;

    reg latched_data : Word[8] on clock;
    reg state : UartSenderState on clock;

    ready := match state {
        @Idle() => 1;
        @Start(pulse) => 0;
        @Send(bit, pulse) => 0;
        @Stop(pulse) => 0;
    };

    state <= if reset {
        @Idle()
    } else {
        match state {
            @Idle() =>
                if data_valid {
                    @Start(1250w11)
                } else {
                    @Idle()
                };
            @Start(pulse) =>
                if pulse->eq(0) {
                    @Send(0, 1250w11)
                } else {
                    @Start(pulse->dec())
                };
            @Send(bit, pulse) =>
                if pulse->eq(0) {
                    if bit->lt(7) {
                        @Send(bit->inc(), 1250w11)
                    } else {
                        @Stop(1250w11)
                    }
                } else {
                    @Send(bit, pulse->dec())
                };
            @Stop(pulse) =>
                if pulse->eq(0) {
                    @Idle()
                } else {
                    @Stop(pulse->dec())
                };
        }
    };

    latched_data := match state {
        @Idle() =>
            if data_valid {
                data
            } else {
                latched_data
            };
        @Start(pulse) => latched_data;
        @Send(bit, pulse) => latched_data;
        @Stop(pulse) => latched_data;
    };

    uart_tx_reg <= if reset {
        1w1
    } else {
        match state {
            @Idle() => 1;
            @Start(pulse) => 0;
            @Send(bit, pulse) =>
                if bit->eq(0) {
                    latched_data[0]
                } else if bit->eq(1) {
                    latched_data[1]
                } else if bit->eq(2) {
                    latched_data[2]
                } else if bit->eq(3) {
                    latched_data[3]
                } else if bit->eq(4) {
                    latched_data[4]
                } else if bit->eq(5) {
                    latched_data[5]
                } else if bit->eq(6) {
                    latched_data[6]
                } else {
                    latched_data[7]
                };
            @Stop(pulse) => 1;
        }
    };
}
