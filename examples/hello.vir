import edge;

struct type Foo {
    x : Word[1];
    y : Word[1];
}

union type State {
    Idle(Word[4], Word[1]);
    SpinCW(Word[5], Word[4]);
    SpinCCW(Word[5], Word[4]);
    Random();
}

pub mod Top {
    incoming clock : Clock;
    outgoing led_0 : Word[1];
    outgoing led_1 : Word[1];
    outgoing led_2 : Word[1];
    outgoing led_3 : Word[1];
    outgoing led_4 : Word[1];

    node foo : Foo;
    foo := $Foo{ x = 0w1, y = 0w1 };

    reg counter : Word[32] on clock;
    counter <= counter->inc();

    mod edge_detector of edge::Edge;
    edge_detector.clock := clock;
    edge_detector.inp   := counter[19];

    reg state : State on clock;
    state <= if edge_detector.out {
        match state {
            @Idle(round, next) => if round->lt(3) {
                @Idle(round->inc(), next)
            } else if next {
                @SpinCCW(0b01000, 0)
            } else {
                @SpinCW(0b00001, 0)
            };
            @SpinCW(x, round) => if x->eq(0b01000) {
                if round->lt(3) {
                    @SpinCW(0b00001, round->inc())
                } else {
                    @Idle(0, 1)
                }
            } else {
                @SpinCW(x->sll(1), round)
            };
            @SpinCCW(x, round) => if x->eq(0b00001) {
                if round->lt(3) {
                    @SpinCCW(0b01000, round->inc())
                } else {
                    @Idle(0, 0)
                }
            } else {
                @SpinCCW(x->srl(1), round)
            };
        }
    } else {
        state
    };


    node led : Word[5];
    led := match state {
        @Idle(round, next) => 0;
        @SpinCW(leds, round) => leds;
        @SpinCCW(leds, round) => leds;
    };

    led_0 := led[0];
    led_1 := led[1];
    led_2 := led[2];
    led_3 := led[3];
    led_4 := match state {
        @Idle(round, next) => next;
        @SpinCW(leds, round) => 0;
        @SpinCCW(leds, round) => 1;
    };
}
