use crate::common::*;
use crate::ast::*;

grammar<'a>(gen: &'a mut AstGen);

pub Package: Ast<Package> = {
    <ll:@L> <imports:PackageImport*> <items:Item*> <rr:@R> => gen.ast(Package {
        imports,
        items,
    }, ll, rr),
}

PackageImport: Ast<PackageImport> = {
    <ll:@L> "import" <ident:Ident> ";" <rr:@R> => gen.ast(PackageImport(ident), ll, rr),
}

Item: Item = {
    <m:ModDef> => Item::ModDef(m),
    <e:StructDef> => Item::StructDef(e),
    <e:UnionDef> => Item::UnionDef(e),
    <e:PortDef> => Item::PortDef(e),
}

Visibility: Visibility = {
  <v:"pub"?> => {
    if v.is_none() {
      Visibility::Private
    } else {
      Visibility::Public
    }
  }
}

ModDef: Ast<ModDef> = {
    <ll:@L> <v:Visibility> <ext:"ext"?> "mod" <name:Ident> "{"
        <decls:(Decl ";")*>
    "}" <rr:@R> => {
        let decls = decls.into_iter().map(|(decl, _semi)| decl).collect();
        gen.ast(ModDef {
            name,
            decls,
            ext: ext.is_some(),
        }, ll, rr)
    },
}

StructDef: Ast<StructDef> = {
    <ll:@L> "struct" "type" <name:Ident> "{"
        <fields:Field*>
    "}" <rr:@R> => {
        gen.ast(StructDef {
            name,
            fields,
        }, ll, rr)
    },
}

Field: Field = {
    <id:Ident> ":" <typ:Type> ";" => Field(id, typ),
}


UnionDef: Ast<UnionDef> = {
    <ll:@L> <vis:Visibility> "union" "type" <name:Ident> "{"
        <alts:Alt*>
    "}" <rr:@R> => {
        gen.ast(UnionDef {
            name,
            alts,
        }, ll, rr)
    },
}

Alt: Alt = {
    <ident:Ident> "(" <typs:TypeList> ")" ";" => Alt(ident, typs),
}

PortDef: Ast<PortDef> = {
    <ll:@L> <vis:Visibility> "port" <name:Ident> "{"
        <channels:Channel*>
    "}" <rr:@R> => {
        gen.ast(PortDef {
            name,
            channels,
        }, ll, rr)
    },
}

Channel: Channel = {
    <dir:ChannelDir> <id:Ident> ":" <typ:Type> ";" => Channel(dir, id, typ),
}

ChannelDir: ChannelDir = {
    "mosi" => ChannelDir::Mosi,
    "miso" => ChannelDir::Miso,
}

TypeList: Vec<Ast<Type>> = {
    <args:((Type ("," Type)* ","?)?)> => {
        if let Some((typ, args, _comma)) = args {
            let mut results = vec![typ];
            for (_comma, typ) in args {
                results.push(typ);
            }
            results
        } else {
            vec![]
        }
    },
}

Decl: Decl = {
    <c:Component> => Decl::Component(c),
    <m:Submodule> => Decl::Submodule(m),
    <p:Port> => Decl::Port(p),
    <c:Wire> => Decl::Wire(c),
}

Component: Ast<Component> = {
    <ll:@L> "incoming" <name:Ident> ":" <typ:Type> <rr:@R> => {
        gen.ast(Component {
            kind: ComponentKind::Incoming,
            name,
            typ: typ,
            clock: None,
        }, ll, rr)
    },
    <ll:@L> "outgoing" <name:Ident> ":" <typ:Type> <rr:@R> => {
        gen.ast(Component {
            kind: ComponentKind::Outgoing,
            name,
            typ: typ,
            clock: None,
        }, ll, rr)
    },
    <ll:@L> "node" <name:Ident> ":" <typ:Type> <rr:@R> => {
        gen.ast(Component {
            kind: ComponentKind::Node,
            name,
            typ: typ,
            clock: None,
        }, ll, rr)
    },
    <ll:@L> "reg" <name:Ident> ":" <typ:Type> "on" <clock:Expr> <rr:@R> => {
        gen.ast(Component {
            kind: ComponentKind::Reg,
            name,
            typ,
            clock: Some(clock),
        }, ll, rr)
    },
}

Submodule: Ast<Submodule> = {
    <ll:@L> "mod" <name:Ident> "of" <moddef:QualIdent> <rr:@R> => gen.ast(Submodule { name, moddef }, ll, rr),
}

Port: Ast<Port> = {
    <ll:@L> <role:PortRole> "port" <name:Ident> "of" <portdef:QualIdent> <rr:@R> => gen.ast(Port { role, name, portdef }, ll, rr),
}

PortRole: PortRole = {
    "master" => PortRole::Master,
    "slave" => PortRole::Slave,
}

Wire: Ast<Wire> = {
    <ll:@L> <target:Path> ":=" <e:Expr> <rr:@R> => gen.ast(Wire(target, WireType::Continuous, e), ll, rr),
    <ll:@L> <target:Path> "<=" <e:Expr> <rr:@R> => gen.ast(Wire(target, WireType::Latched, e), ll, rr),
}

Type: Ast<Type> = {
    <ll:@L> "Clock" <rr:@R> => gen.ast(Type::Clock, ll, rr),
    <ll:@L> "Word" "[" <w:Nat> "]" <rr:@R> => gen.ast(Type::Word(w), ll, rr),
    <ll:@L> <path:QualIdent> <rr:@R> => gen.ast(Type::TypeRef(path), ll, rr),
}

pub Expr: Ast<Expr> = {
    <e:ExprLet> => e,
    <e:ExprMatch> => e,
    <e:ExprIf> => e,
    <e:ExprCall> => e,
}

ExprLet: Ast<Expr> = {
    <ll:@L> "let" <x:Ident> <ascription:(":" Type)?> "=" <e:Expr> "in"
    <b:Expr> <rr:@R> => {
        let type_ascription = ascription.map(|(_of, typ)| typ);
        gen.ast(Expr::Let(x, type_ascription, e, b), ll, rr)
    },
}

ExprMatch: Ast<Expr> = {
    <ll:@L> "match" <ascription:(":" Type)?> <e:Expr> "{"
        <arms:MatchArm*>
    "}" <rr:@R> => {
        let type_ascription = ascription.map(|(_of, typ)| typ);
        gen.ast(Expr::Match(e, type_ascription, arms), ll, rr)
    },
}

MatchArm: MatchArm = {
    <pat:Pat> "=>" <e:Expr> ";" => MatchArm(pat, e),
}

Pat: Pat = {
    <id:Ctor> => Pat::At(id.as_str()[1..].into(), vec![]),
    <id:Ctor> "(" <subpats:PatList> ")" => {
        Pat::At(id.as_str().into(), subpats)
    },
    <id:Ident> => Pat::Bind(id.into()),
    "else" => Pat::Otherwise,
}

PatList: Vec<Pat> = {
    <pats:((Pat ("," Pat)* ","?)?)> => {
        if let Some((pat, pats, _comma)) = pats {
            let mut results = vec![pat];
            for (_comma, pat) in pats {
                results.push(pat);
            }
            results
        } else {
            vec![]
        }
    },
}

ExprIf: Ast<Expr> = {
    <ll:@L> "if" <cond:Expr> "{"
        <e1:Expr>
    <elseifs:("}" "else" "if" Expr "{" Expr)*>
    "}" "else" "{"
        <elseexpr:Expr>
    "}" <rr:@R> => {
        let mut result = elseexpr;

        // TODO spans are incorrect here!
        for (_, _, _, elseif_cond, _, elseif_body) in elseifs.into_iter().rev() {
            result = gen.ast(Expr::If(elseif_cond, elseif_body, result), ll, rr);
        }

        gen.ast(Expr::If(cond, e1, result), ll, rr)
    },
}

ExprCall: Ast<Expr> = {
//    <ll:@L> <name:Ctor> <rr:@R> =>  gen.ast(Expr::Call(name, vec![], vec![]), ll, rr),
    <ll:@L> <name:Ctor> "(" <es:ExprList> ")" <rr:@R> =>  gen.ast(Expr::Ctor(name, es), ll, rr),

    <ll:@L> "cat" "(" <es:ExprList> ")" <rr:@R> => {
        gen.ast(Expr::Cat(es), ll, rr)
    },

//    <ll:@L> <name:Ident> "(" <es:ExprList> ")" <rr:@R> => {
//        gen.ast(Expr::FnCall(name, es), ll, rr)
//    },
    <ll:@L> <s:ExprCall> "->" <name:Ident> "(" <es:ExprList> ")" <rr:@R> => {
        gen.ast(Expr::MethodCall(s, name, es), ll, rr)
    },
    <ll:@L> <s:ExprCall> "->" "as" "(" <typ:Type> ")" <rr:@R> => {
        gen.ast(Expr::As(s, typ), ll, rr)
    },
//    <ll:@L> <e:ExprBase> "->" <field:Ident> <rr:@R> => Arc::new(Expr::IdxField(e, field.clone())),
    <ll:@L> <e:ExprBase> "[" <i:Nat> "]" <rr:@R> => gen.ast(Expr::Idx(e, i), ll, rr),
    <ll:@L> <e:ExprBase> "[" <j:Nat> ".." <i:Nat> "]" <rr:@R> => gen.ast(Expr::IdxRange(e, j, i), ll, rr),
    <e:ExprBase> => e,
}

ExprBase: Ast<Expr> = {
    <e:ExprVec> => e,
    <e:ExprStruct> => e,
    <e:ExprLit> => e,
    <e:ExprReference> => e,
    "(" <e:Expr> ")" => e,
}

FieldExprList: Vec<(Ident, Ast<Expr>)> = {
    <fields:((Ident "=" Expr ("," Ident "=" Expr)* ","?)?)> => {
        if let Some((name, _eqsign, expr, fields, _comma)) = fields {
            let mut results = vec![(name, expr)];
            for (_comma, name, _eqsign, expr) in fields {
                results.push((name, expr));
            }
            results
        } else {
            vec![]
        }
    },
}

ExprStruct: Ast<Expr> = {
    <ll:@L> "$" <id:QualIdent> "{" <fields:FieldExprList> "}" <rr:@R> => {
        gen.ast(Expr::Struct(Some(id), fields), ll, rr)
    },
}

ExprVec: Ast<Expr> = {
    <ll:@L> "[" <es:ExprList> "]" <rr:@R> => gen.ast(Expr::Vec(es), ll, rr),
    <ll:@L> "[" <e:Expr> ";" <n:Nat> "]" <rr:@R> => gen.ast(Expr::Vec(vec![e; n as usize]), ll, rr),
}

ExprList: Vec<Ast<Expr>> = {
    <exprs:((Expr ("," Expr)* ","?)?)> => {
        if let Some((expr, exprs, _comma)) = exprs {
            let mut results = vec![expr];
            for (_comma, expr) in exprs {
                results.push(expr);
            }
            results
        } else {
            vec![]
        }
    },
}

ExprLit: Ast<Expr> = {
    <ll:@L> <lit:WordLit> <rr:@R> => {
        gen.ast(Expr::Word(lit), ll, rr)
    },
}

ExprReference: Ast<Expr> = {
  <ll:@L> <path:Path> <rr:@R> => gen.ast(Expr::Reference(path), ll, rr),
}


Path: Path = {
    <id0:Ident> <ids:("." Ident)*> => {
        let mut parts = vec![id0.to_string()];
        for (_, id) in ids {
          parts.push(id.to_string());
        }
        let path: String = parts.join(".").chars().collect();
        path.into()
    },
}

WordLit: WordLit = {
    <n:Nat> => {
        WordLit {
            value: n,
            width: None,
            spelling: n.to_string(), // TODO lies!
        }
    },
    <lit:r"[0-9][_0-9]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = parts[0].parse().unwrap();
        let width = parts[1].parse().unwrap();
        WordLit {
            value: v,
            width: Some(width),
            spelling: lit.to_string(),
        }
    },
    <lit:r"0b[0-1][_0-1]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = u64::from_str_radix(&parts[0][2..], 2).unwrap();
        let width = parts[1].parse().unwrap();
        WordLit {
            value: v,
            width: Some(width),
            spelling: lit.to_string(),
        }
    },
    <lit:r"0x[0-9a-fA-F][_0-9a-fA-F]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = u64::from_str_radix(&parts[0][2..], 16).unwrap();
        let width = parts[1].parse().unwrap();
        WordLit {
            value: v,
            width: Some(width),
            spelling: lit.to_string(),
        }
    },
}

Nat: u64 = {
    <lit:r"[0-9][_0-9]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        lit_nounders.parse().unwrap()
    },
    <lit:r"0b[0-1][_0-1]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        u64::from_str_radix(&lit_nounders[2..], 2).unwrap()
    },
    <lit:r"0x[0-9A-Za-z][_0-9A-Za-z]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        u64::from_str_radix(&lit_nounders[2..], 16).unwrap()
    },
}

Ctor: Ident = {
    <rr:@R> <id:r"@[_A-Za-z][_A-Za-z0-9]*"> <ll:@L> => {
        id[1..].into()
    },
}

QualIdent: QualIdent = {
    <ll:@L> <id:r"[_A-Za-z][_A-Za-z0-9]*::[_A-Za-z][_A-Za-z0-9]*"> <rr:@R> => {
        let parts: Vec<&str> = id.split("::").collect();
        assert_eq!(parts.len(), 2);
        let namespace: Option<Ident> = Some(parts[0].into());
        let name: Ident = parts[1].into();
        QualIdent::new(namespace, name)
    },
    <id:Ident> => QualIdent::new(None, id)
}

Ident: Ident = {
    <ll:@L> <id:r"[_A-Za-z][_A-Za-z0-9]*"> <rr:@R> => {
        id.into()
    },
}

match {
    r"//[^\n\r]*[\r\n]" => {},
    r"[\r\n]*" => {},
    r"/\*[^*]*\*/" => {},
    r" " => {},
} else {
    r"0x[0-9A-Za-z][_0-9A-Za-z]*"
} else {
    _,
}
