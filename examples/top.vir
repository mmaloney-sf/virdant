import resetter;
import edge;

mod Top {
    incoming clock : Clock;
    outgoing led_0 : Word[1];
    outgoing led_1 : Word[1];
    outgoing led_2 : Word[1];
    outgoing led_3 : Word[1];
    outgoing led_4 : Word[1];

    mod resetter of resetter::Resetter;
    resetter.clock := clock;
    node reset : Word[1];
    reset := resetter.out;

    reg counter : Word[32] on clock;
    counter <= counter->inc();

    mod edge_detector of edge::Edge;
    edge_detector.clock := clock;
    edge_detector.inp   := counter[23];

    reg leds : Word[4] on clock;
    leds <= if reset {
            0b11111
        } else if edge_detector.out {
        let next = leds->sll(1) in
        if next->eq(0) {
            1
        } else {
            next
        }
    } else {
        leds
    };

    led_0 := leds[0];
    led_1 := leds[1];
    led_2 := leds[2];
    led_3 := leds[3];
    led_4 := leds[4];
}
