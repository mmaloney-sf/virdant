alt type State {
    Idle();
    Idle2();
    Running(Word[2]);
}

pub mod Top {
    incoming clock : Clock;
    outgoing led_0 : Word[1];
    outgoing led_1 : Word[1];
    outgoing led_2 : Word[1];
    outgoing led_3 : Word[1];
    outgoing led_4 : Word[1];

    node state : State;
    state := @Idle();

    node foo : State;
    foo := @Idle2();

    reg counter : Word[32] on clock;
    counter <= counter->inc();

    node led : Word[5];
//    led := counter[25..20];
    led := counter[7..2];

    led_0 := led[4];
    led_1 := led[1];
    led_2 := led[2];
    led_3 := led[3];
    led_4 := led[0];
}

mod Resetter {
    incoming clock   : Clock;
    outgoing reset : Word[1];

    reg counter : Word[8] on clock;
    counter <= if counter->gt(0) {
        counter->sub(1)
    } else {
        0
    };

    reset := counter->eq(1);
}

mod Buffer {
    incoming clock : Clock;
    incoming in : Word[3];
    outgoing out : Word[3];

    reg buffer : Word[3] on clock;
    buffer <= in;
    out := buffer;
}
