////////////////////////////////////////////////////////////////////////////////
// Package
////////////////////////////////////////////////////////////////////////////////

package = { SOI ~ import* ~ item* ~ EOI }

import = { kw_import ~ (#package=ident) ~ ";" }

item = {
    moddef |
    uniondef |
    structdef |
    builtindef |
    portdef
}


////////////////////////////////////////////////////////////////////////////////
// Item Definitions
////////////////////////////////////////////////////////////////////////////////

moddef = {
    kw_ext? ~ kw_mod ~ (#name=ident) ~ "{" ~
        (moddef_statement ~ ";")* ~
    "}"
}

uniondef = {
    kw_union ~ kw_type ~ (#name=ident) ~ "{" ~
        (uniondef_statement ~ ";")* ~
    "}"
}

structdef = {
    kw_struct ~ kw_type ~ (#name=ident) ~ "{" ~
        (structdef_statement ~ ";")* ~
    "}"
}

builtindef = {
    kw_builtin ~ kw_type ~ (#name=ident) ~ "{" ~
    "}"
}

portdef = {
    kw_port ~ (#name=ident) ~ "{" ~
        (portdef_statement ~ ";")* ~
    "}"
}


////////////////////////////////////////////////////////////////////////////////
// Statements
////////////////////////////////////////////////////////////////////////////////

moddef_statement = {
    moddef_statement_incoming |
    moddef_statement_outgoing |
    moddef_statement_reg |
    moddef_statement_node |
    moddef_statement_mod |
    moddef_statement_port |
    moddef_statement_driver
}

moddef_statement_incoming = { kw_incoming ~ (#name=ident) ~ ":" ~ (#type=type) }
moddef_statement_outgoing = { kw_outgoing ~ (#name=ident) ~ ":" ~ (#type=type) }
moddef_statement_reg = { kw_reg ~ (#name=ident) ~ ":" ~ (#type=type) ~ "on" ~ (#clock=expr) }
moddef_statement_node = { kw_node ~ (#name=ident) ~ ":" ~ (#type=type) }
moddef_statement_mod = { kw_mod ~ (#name=ident) ~ kw_of ~ (#of=qualident) }
moddef_statement_port = { port_role ~ kw_port ~ (#name=ident) ~ kw_of ~ (#of=qualident) }
moddef_statement_driver = { (#target=path) ~ (#drivertype=drivertype) ~ (#expr=expr) }

uniondef_statement = {
    (#name=ident) ~ "(" ~ (#args=arg_list) ~ ")"
}

structdef_statement = {
    (#name=ident) ~ ":" ~ (#type=type)
}

portdef_statement = {
    (#dir=channel_dir) ~ (#name=ident) ~ ":" ~ (#type=type) ~ ";"
}


////////////////////////////////////////////////////////////////////////////////
// Types
////////////////////////////////////////////////////////////////////////////////

type = {
    (#name=qualident) ~ ("[" ~ (#args=typeargs_list) ~ "]")?
}


////////////////////////////////////////////////////////////////////////////////
// Module Elements
////////////////////////////////////////////////////////////////////////////////

drivertype = {
    ":=" |
    "<="
}


////////////////////////////////////////////////////////////////////////////////
// Lists
////////////////////////////////////////////////////////////////////////////////

type_list = {
    (type ~ ("," ~ type)* ~ ","?)?
}

expr_list = {
    (expr ~ ("," ~ expr)* ~ ","?)?
}

arg_list = {
    (arg ~ ("," ~ arg)* ~ ","?)?
}

typeargs_list = {
    (typearg ~ ("," ~ typearg)* ~ ","?)?
}

pat_list = {
    (pat ~ ("," ~ pat)* ~ ","?)?
}

assign_list = {
    (assign ~ ("," ~ assign)* ~ ","?)?
}

assign = {
    ident ~ "=" ~ expr
}


////////////////////////////////////////////////////////////////////////////////
// Expressions
////////////////////////////////////////////////////////////////////////////////

expr = {
    expr_if |
    expr_match |
    expr_call
}

expr_if = {
    kw_if ~ expr ~ "{" ~
        expr ~
    (
        "}" ~ kw_else ~ kw_if ~ expr ~ "{" ~
            expr
    )* ~
    "}" ~ kw_else ~ "{" ~
        expr ~
    "}"
}

expr_match = {
    kw_match ~ expr ~ "{" ~
        expr_match_arm* ~
    "}"
}

expr_match_arm = {
    pat ~ "=>" ~ expr ~ ";"
}

expr_call = {
    expr_base ~ expr_call_suffix*
}

expr_call_suffix = {
    "->" ~ ident ~ "(" ~ expr_list ~ ")" |
    "[" ~ nat ~ "]" |
    "[" ~ nat ~ ".." ~ nat ~ "]"
}

expr_base = {
    kw_cat ~ "(" ~ expr_list ~ ")" |
    ctor ~ "(" ~ expr_list ~ ")" |
    struct ~ "{" ~ assign_list ~ "}" |
    path |
    wordlit |
    "(" ~ expr ~ ")"
}


////////////////////////////////////////////////////////////////////////////////
// Basics
////////////////////////////////////////////////////////////////////////////////

channel_dir = {
    kw_mosi |
    kw_miso
}

pat = {
    ctor ~ "(" ~ pat_list ~ ")" |
    ident |
    kw_else
}

arg = {
    (#name=ident) ~ ":" ~ (#type=type)
}

typearg = {
    type |
    nat
}

path = @{ ident ~ ("." ~ ident)* }

port_role = {
    kw_master |
    kw_slave
}

wordlit = @{
    nat ~ ("w" ~ ASCII_DIGIT+)?
}

qualident = @{ (ident ~ "::")? ~ ident }
ident = @{ !keyword ~ ("_" | ASCII_ALPHA) ~ ("_" | ASCII_ALPHANUMERIC)* }
ctor = @{ "@" ~ qualident }
struct = @{ "$" ~ qualident }

nat = @{
    "0x" ~ ("_" | ASCII_HEX_DIGIT)+ |
    "0b" ~ ("_" | ASCII_BIN_DIGIT)+ |
    ASCII_DIGIT+
}


////////////////////////////////////////////////////////////////////////////////
// Keywords
////////////////////////////////////////////////////////////////////////////////

kw_ext          = @{ "ext"        ~ !(ASCII_ALPHANUMERIC | "_") }
kw_import       = @{ "import"     ~ !(ASCII_ALPHANUMERIC | "_") }
kw_mod          = @{ "mod"        ~ !(ASCII_ALPHANUMERIC | "_") }
kw_struct       = @{ "struct"     ~ !(ASCII_ALPHANUMERIC | "_") }
kw_union        = @{ "union"      ~ !(ASCII_ALPHANUMERIC | "_") }
kw_builtin      = @{ "builtin"    ~ !(ASCII_ALPHANUMERIC | "_") }
kw_type         = @{ "type"       ~ !(ASCII_ALPHANUMERIC | "_") }
kw_incoming     = @{ "incoming"   ~ !(ASCII_ALPHANUMERIC | "_") }
kw_outgoing     = @{ "outgoing"   ~ !(ASCII_ALPHANUMERIC | "_") }
kw_reg          = @{ "reg"        ~ !(ASCII_ALPHANUMERIC | "_") }
kw_node         = @{ "node"       ~ !(ASCII_ALPHANUMERIC | "_") }
kw_port         = @{ "port"       ~ !(ASCII_ALPHANUMERIC | "_") }
kw_of           = @{ "of"         ~ !(ASCII_ALPHANUMERIC | "_") }
kw_if           = @{ "if"         ~ !(ASCII_ALPHANUMERIC | "_") }
kw_else         = @{ "else"       ~ !(ASCII_ALPHANUMERIC | "_") }
kw_match        = @{ "match"      ~ !(ASCII_ALPHANUMERIC | "_") }
kw_cat          = @{ "cat"        ~ !(ASCII_ALPHANUMERIC | "_") }
kw_mosi         = @{ "mosi"       ~ !(ASCII_ALPHANUMERIC | "_") }
kw_miso         = @{ "miso"       ~ !(ASCII_ALPHANUMERIC | "_") }
kw_master       = @{ "master"     ~ !(ASCII_ALPHANUMERIC | "_") }
kw_slave        = @{ "slave"      ~ !(ASCII_ALPHANUMERIC | "_") }

keyword = {
    kw_ext |
    kw_import |
    kw_mod |
    kw_struct |
    kw_union |
    kw_type |
    kw_incoming |
    kw_outgoing |
    kw_reg |
    kw_node |
    kw_port |
    kw_of |
    kw_if |
    kw_else |
    kw_match |
    kw_cat |
    kw_mosi |
    kw_miso
}


////////////////////////////////////////////////////////////////////////////////
// Extras
////////////////////////////////////////////////////////////////////////////////

COMMENT = _{
    "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE |
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

WHITESPACE = _{
    " " |
    NEWLINE
}
